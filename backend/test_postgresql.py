#!/usr/bin/env python3
"""
Teste de Conex√£o PostgreSQL
===========================

Script para testar se a migra√ß√£o PostgreSQL est√° funcionando corretamente.
"""

import os
import sys
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv()

def test_postgresql_connection():
    """Testa conex√£o com PostgreSQL"""
    try:
        from database_postgresql import get_db, health_check
        
        print("=== TESTE POSTGRESQL ===")
        print()
        
        # Teste 1: Conex√£o b√°sica
        print("1. Testando conex√£o...")
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT version()")
            version = cursor.fetchone()[0]
            print(f"   ‚úÖ PostgreSQL conectado!")
            print(f"   üìä Vers√£o: {version[:80]}...")
        
        # Teste 2: Health check
        print()
        print("2. Executando health check...")
        health = health_check()
        if health['status'] == 'healthy':
            print("   ‚úÖ Health check: OK")
            print(f"   üîó Conex√µes ativas: {health['pool_info']['active_connections']}")
            print(f"   üíæ Conex√µes dispon√≠veis: {health['pool_info']['available_connections']}")
        else:
            print(f"   ‚ùå Health check: {health.get('error', 'FALHOU')}")
        
        # Teste 3: Contar registros migrados
        print()
        print("3. Verificando dados migrados...")
        with get_db() as conn:
            cursor = conn.cursor()
            
            tables_to_check = [
                ('acoes', 'a√ß√µes cadastradas'),
                ('usuarios', 'usu√°rios'),
                ('operacoes', 'opera√ß√µes'),
                ('operacoes_fechadas', 'opera√ß√µes fechadas'),
                ('cotacao_acoes', 'cota√ß√µes hist√≥ricas')
            ]
            
            total_records = 0
            for table, description in tables_to_check:
                cursor.execute(f"SELECT COUNT(*) FROM {table}")
                count = cursor.fetchone()[0]
                total_records += count
                print(f"   üìä {table}: {count:,} {description}")
            
            print(f"   üéØ Total de registros: {total_records:,}")
        
        # Teste 4: Funcionalidade espec√≠fica (buscar a√ß√£o)
        print()
        print("4. Testando funcionalidades...")
        from database_postgresql import obter_acao_info_por_ticker
        
        acao_teste = obter_acao_info_por_ticker('ITUB4')
        if acao_teste:
            print(f"   ‚úÖ Busca de a√ß√£o: {acao_teste['ticker']} - {acao_teste['nome']}")
        else:
            print("   ‚ö†Ô∏è Nenhuma a√ß√£o encontrada para teste")
        
        print()
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ PostgreSQL est√° funcionando corretamente")
        print("üöÄ Aplica√ß√£o pronta para usar PostgreSQL em produ√ß√£o!")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        print("üí° Verifique se database_postgresql.py est√° correto")
        return False
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        print("üí° Verifique se PostgreSQL est√° rodando e configurado")
        return False

def test_fallback_sqlite():
    """Testa fallback para SQLite"""
    print()
    print("=== TESTE FALLBACK SQLITE ===")
    try:
        from database import get_db
        
        with get_db() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM acoes")
            count = cursor.fetchone()[0]
            print(f"‚úÖ SQLite funcionando: {count} a√ß√µes cadastradas")
            return True
    except Exception as e:
        print(f"‚ùå SQLite tamb√©m falhou: {e}")
        return False

if __name__ == "__main__":
    print("üîß TESTE DE MIGRA√á√ÉO POSTGRESQL")
    print("=" * 50)
    
    success = test_postgresql_connection()
    
    if not success:
        print()
        print("üîÑ Testando fallback SQLite...")
        sqlite_ok = test_fallback_sqlite()
        
        if sqlite_ok:
            print()
            print("üí° SOLU√á√ÉO TEMPOR√ÅRIA:")
            print("   1. Manter SQLite funcionando")
            print("   2. Corrigir PostgreSQL depois")
            print("   3. Alterar imports quando PostgreSQL estiver OK")
        else:
            print("‚ùå Ambos bancos falharam - verificar configura√ß√£o")
            sys.exit(1)
    
    sys.exit(0 if success else 1)