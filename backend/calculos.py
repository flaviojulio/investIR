"""
Este m√≥dulo cont√©m toda a l√≥gica de neg√≥cio para c√°lculos relacionados a
opera√ß√µes de a√ß√µes, incluindo pre√ßo m√©dio, resultados de opera√ß√µes,
e apura√ß√£o de impostos, seguindo as regras da B3 e da Receita Federal.
"""

from collections import defaultdict
from dataclasses import dataclass, field
from datetime import date
from typing import List, Dict, Any, Optional

from models import Operacao

@dataclass
class PosicaoAcao:
    """Representa a posi√ß√£o em uma √∫nica a√ß√£o."""
    ticker: str
    quantidade: int = 0
    custo_total: float = 0.0
    preco_medio: float = 0.0

    # ‚úÖ CORRE√á√ÉO: Posi√ß√£o vendida (short) com campos corretos
    quantidade_vendida: int = 0
    valor_venda_total: float = 0.0
    preco_medio_venda: float = 0.0
    
    def tem_posicao_vendida(self) -> bool:
        """Verifica se h√° posi√ß√£o vendida (short)"""
        return self.quantidade_vendida > 0
    
    def tem_posicao_comprada(self) -> bool:
        """Verifica se h√° posi√ß√£o comprada (long)"""
        return self.quantidade > 0


def classificar_operacoes_por_dia(operacoes_do_dia: List[Operacao]) -> Dict[str, List[Operacao]]:
    """
    CORRE√á√ÉO: N√£o separa mais opera√ß√µes por DT/ST.
    Apenas identifica se √© um dia de day trade ou n√£o.
    
    Para day trade: usa pre√ßo m√©dio ponderado global
    Para swing trade: usa pre√ßo m√©dio hist√≥rico
    """
    ops_por_ticker = defaultdict(lambda: {'compras': [], 'vendas': []})
    for op in operacoes_do_dia:
        if op.operation == 'buy':
            ops_por_ticker[op.ticker]['compras'].append(op)
        else:
            ops_por_ticker[op.ticker]['vendas'].append(op)

    # Verificar se h√° day trade (compra E venda no mesmo dia)
    day_trade_tickers = []
    for ticker, trades in ops_por_ticker.items():
        compras = trades['compras']
        vendas = trades['vendas']
        
        if compras and vendas:  # H√° compra E venda = day trade
            day_trade_tickers.append(ticker)

    # NOVA L√ìGICA: N√£o separa opera√ß√µes, apenas marca como DT ou ST
    if day_trade_tickers:
        # √â um dia de day trade - retorna TODAS as opera√ß√µes como day_trade
        return {
            'day_trade': operacoes_do_dia,
            'swing_trade': []
        }
    else:
        # √â um dia de swing trade apenas
        return {
            'day_trade': [],
            'swing_trade': operacoes_do_dia
        }


@dataclass
class OperacaoFechada:
    """Representa uma opera√ß√£o de compra/venda que foi liquidada."""
    ticker: str
    quantidade: int
    preco_medio_compra: float
    preco_medio_venda: float
    resultado: float
    day_trade: bool
    data_fechamento: date


def _calcular_status_ir_operacao_fechada(op_fechada, resultados_mensais_map):
    """
    Calcula o status de IR para uma opera√ß√£o fechada
    """
    data_fechamento = op_fechada["data_fechamento"]
    if isinstance(data_fechamento, str):
        from datetime import datetime
        data_fechamento_obj = datetime.fromisoformat(data_fechamento.split("T")[0]).date()
    else:
        data_fechamento_obj = data_fechamento

    mes_fechamento = data_fechamento_obj.strftime("%Y-%m")
    resultado_mes = resultados_mensais_map.get(mes_fechamento)

    # ‚úÖ CORRE√á√ÉO com debug tempor√°rio
    resultado = op_fechada["resultado"]
    ticker = op_fechada.get("ticker", "N/A")
    
    if resultado == 0:
        print(f"üü¢ [STATUS CORRIGIDO] {ticker}: resultado=0 ‚Üí Isento")
        return "Isento"
    
    if resultado < 0:
        print(f"üî¥ [STATUS] {ticker}: resultado={resultado} ‚Üí Preju√≠zo Acumulado")
        return "Preju√≠zo Acumulado"

    # Para opera√ß√µes com lucro (resultado > 0)
    print(f"üü° [STATUS] {ticker}: resultado={resultado} ‚Üí Analisando tributa√ß√£o...")
    
    if op_fechada["day_trade"]:
        if resultado_mes and resultado_mes.get("ir_pagar_day", 0) > 0:
            print(f"üü† [STATUS] {ticker}: Day Trade tribut√°vel")
            return "Tribut√°vel Day Trade"
        else:
            print(f"üü¢ [STATUS] {ticker}: Day Trade compensado")
            return "Lucro Compensado"
    else:  # Swing Trade
        if resultado_mes and resultado_mes.get("isento_swing", False):
            print(f"üü¢ [STATUS] {ticker}: Swing Trade isento")
            return "Isento"
        elif resultado_mes and resultado_mes.get("ir_pagar_swing", 0) > 0:
            print(f"üîµ [STATUS] {ticker}: Swing Trade tribut√°vel")
            return "Tribut√°vel Swing"
        else:
            print(f"üü¢ [STATUS] {ticker}: Swing Trade compensado")
            return "Lucro Compensado"

# ‚úÖ CORRE√á√ïES no m√≥dulo calculos.py

def calcular_resultado_day_trade(operacoes: List[Operacao]) -> Optional[OperacaoFechada]:
    """
    CORRE√á√ÉO: Calcula o resultado de day trade usando pre√ßo m√©dio ponderado global.
    Adiciona valida√ß√µes para evitar pre√ßos m√©dios zerados.
    """
    if not operacoes:
        return None

    ticker = operacoes[0].ticker
    data_operacao = operacoes[0].date

    compras = [op for op in operacoes if op.operation == 'buy']
    vendas = [op for op in operacoes if op.operation == 'sell']

    if not compras or not vendas:
        return None  # N√£o √© day trade completo

    # ‚úÖ CORRE√á√ÉO: Calcular pre√ßo m√©dio ponderado global de TODAS as compras
    total_custo_compra = sum(op.quantity * op.price + op.fees for op in compras)
    total_qtd_compra = sum(op.quantity for op in compras)
    
    # ‚úÖ VALIDA√á√ÉO: Verificar se h√° quantidade de compra
    if total_qtd_compra <= 0:
        print(f"‚ùå ERRO: Quantidade total de compra √© zero para {ticker}")
        return None
    
    # ‚úÖ CORRE√á√ÉO: Calcular pre√ßo m√©dio ponderado global de TODAS as vendas
    total_valor_venda_bruto = sum(op.quantity * op.price for op in vendas)
    total_fees_venda = sum(op.fees for op in vendas)
    total_valor_venda_liquido = total_valor_venda_bruto - total_fees_venda
    total_qtd_venda = sum(op.quantity for op in vendas)

    # ‚úÖ VALIDA√á√ÉO: Verificar se h√° quantidade de venda
    if total_qtd_venda <= 0:
        print(f"‚ùå ERRO: Quantidade total de venda √© zero para {ticker}")
        return None

    # ‚úÖ CORRE√á√ÉO: Pre√ßo m√©dio ponderado global com valida√ß√£o
    pm_compra = total_custo_compra / total_qtd_compra
    pm_venda = total_valor_venda_liquido / total_qtd_venda

    # ‚úÖ VALIDA√á√ïES CR√çTICAS
    if pm_compra <= 0:
        print(f"‚ùå ERRO: Pre√ßo m√©dio de compra √© zero ou negativo: {pm_compra}")
        print(f"   Detalhes: custo_total={total_custo_compra}, qtd_total={total_qtd_compra}")
        return None
        
    if pm_venda <= 0:
        print(f"‚ùå ERRO: Pre√ßo m√©dio de venda √© zero ou negativo: {pm_venda}")
        print(f"   Detalhes: valor_liquido={total_valor_venda_liquido}, qtd_total={total_qtd_venda}")
        return None

    # Day trade √© a menor quantidade entre compras e vendas
    qtd_day_trade = min(total_qtd_compra, total_qtd_venda)

    # ‚úÖ CORRE√á√ÉO: Resultado baseado no pre√ßo m√©dio ponderado global
    resultado = (pm_venda - pm_compra) * qtd_day_trade

    print(f"‚úÖ Day Trade {ticker}: PM_compra={pm_compra:.2f}, PM_venda={pm_venda:.2f}, Qtd={qtd_day_trade}, Resultado={resultado:.2f}")

    return OperacaoFechada(
        ticker=ticker,
        quantidade=qtd_day_trade,
        preco_medio_compra=pm_compra,
        preco_medio_venda=pm_venda,
        resultado=resultado,
        day_trade=True,
        data_fechamento=data_operacao
    )


def processar_operacao_swing_trade(posicao: PosicaoAcao, operacao: Operacao) -> Optional[OperacaoFechada]:
    """
    Processa uma √∫nica opera√ß√£o de swing trade.
    CORRE√á√ÉO: Trata adequadamente vendas a descoberto e suas coberturas.
    """
    if operacao.operation == 'buy':
        # ‚úÖ CASO 1: Compra para cobrir posi√ß√£o vendida (short covering)
        if posicao.tem_posicao_vendida():
            qtd_a_cobrir = min(operacao.quantity, posicao.quantidade_vendida)
            
            # Calcular pre√ßos efetivos
            preco_compra_efetivo = operacao.price + (operacao.fees / operacao.quantity if operacao.quantity > 0 else 0)
            preco_venda_original = posicao.preco_medio_venda
            
            # ‚úÖ VALIDA√á√ÉO: Verificar se pre√ßos s√£o v√°lidos
            if preco_venda_original <= 0:
                print(f"‚ùå ERRO: Pre√ßo m√©dio da venda a descoberto inv√°lido: {preco_venda_original}")
                return None
            
            # Criar opera√ß√£o fechada de cobertura (VENDA ‚Üí COMPRA)
            resultado = (preco_venda_original - preco_compra_efetivo) * qtd_a_cobrir
            
            op_fechada = OperacaoFechada(
                ticker=posicao.ticker,
                quantidade=qtd_a_cobrir,
                preco_medio_compra=preco_compra_efetivo,    # Pre√ßo da compra de cobertura
                preco_medio_venda=preco_venda_original,     # Pre√ßo da venda original
                resultado=resultado,
                day_trade=False,
                data_fechamento=operacao.date
            )
            
            # Atualizar posi√ß√£o vendida
            valor_removido = qtd_a_cobrir * preco_venda_original
            posicao.quantidade_vendida -= qtd_a_cobrir
            posicao.valor_venda_total -= valor_removido
            
            if posicao.quantidade_vendida > 0:
                posicao.preco_medio_venda = posicao.valor_venda_total / posicao.quantidade_vendida
            else:
                posicao.preco_medio_venda = 0.0
                posicao.valor_venda_total = 0.0
            
            # Se sobrou quantidade da compra, adicionar √† posi√ß√£o longa
            qtd_restante = operacao.quantity - qtd_a_cobrir
            if qtd_restante > 0:
                custo_restante = qtd_restante * preco_compra_efetivo
                posicao.quantidade += qtd_restante
                posicao.custo_total += custo_restante
                if posicao.quantidade > 0:
                    posicao.preco_medio = posicao.custo_total / posicao.quantidade
            
            print(f"‚úÖ Short Covering {posicao.ticker}: PM_venda={preco_venda_original:.2f}, PM_compra={preco_compra_efetivo:.2f}, Qtd={qtd_a_cobrir}, Resultado={resultado:.2f}")
            return op_fechada
        
        # ‚úÖ CASO 2: Compra normal (adicionar √† posi√ß√£o longa)
        else:
            custo_compra = operacao.quantity * operacao.price + operacao.fees
            posicao.custo_total += custo_compra
            posicao.quantidade += operacao.quantity

            if posicao.quantidade > 0:
                posicao.preco_medio = posicao.custo_total / posicao.quantidade
                
                # ‚úÖ VALIDA√á√ÉO: Verificar se pre√ßo m√©dio faz sentido
                if posicao.preco_medio <= 0:
                    print(f"‚ùå ERRO: Pre√ßo m√©dio de compra inv√°lido: {posicao.preco_medio}")
                    print(f"   Detalhes: custo_total={posicao.custo_total}, quantidade={posicao.quantidade}")

            return None

    elif operacao.operation == 'sell':
        # ‚úÖ CASO 3: Venda de posi√ß√£o longa existente
        if posicao.tem_posicao_comprada():
            qtd_a_vender = min(operacao.quantity, posicao.quantidade)
            
            # ‚úÖ VALIDA√á√ÉO: Verificar se pre√ßo m√©dio da posi√ß√£o √© v√°lido
            if posicao.preco_medio <= 0:
                print(f"‚ùå ERRO: Pre√ßo m√©dio da posi√ß√£o longa √© inv√°lido: {posicao.preco_medio}")
                return None
            
            preco_venda_efetivo = operacao.price - (operacao.fees / operacao.quantity if operacao.quantity > 0 else 0)
            custo_da_venda = qtd_a_vender * posicao.preco_medio
            valor_da_venda = qtd_a_vender * preco_venda_efetivo
            resultado = valor_da_venda - custo_da_venda

            # Criar opera√ß√£o fechada normal (COMPRA ‚Üí VENDA)
            op_fechada = OperacaoFechada(
                ticker=posicao.ticker,
                quantidade=qtd_a_vender,
                preco_medio_compra=posicao.preco_medio,
                preco_medio_venda=preco_venda_efetivo,
                resultado=resultado,
                day_trade=False,
                data_fechamento=operacao.date
            )

            # Atualizar posi√ß√£o longa
            posicao.quantidade -= qtd_a_vender
            posicao.custo_total -= custo_da_venda

            # ‚úÖ VALIDA√á√ÉO DE ZERAMENTO
            if posicao.quantidade == 0:
                posicao.preco_medio = 0.0
                posicao.custo_total = 0.0
            elif posicao.quantidade > 0:
                posicao.preco_medio = posicao.custo_total / posicao.quantidade

            # Se sobrou quantidade da venda, criar posi√ß√£o vendida
            qtd_restante = operacao.quantity - qtd_a_vender
            if qtd_restante > 0:
                valor_venda_restante = qtd_restante * preco_venda_efetivo
                posicao.quantidade_vendida += qtd_restante
                posicao.valor_venda_total += valor_venda_restante
                posicao.preco_medio_venda = posicao.valor_venda_total / posicao.quantidade_vendida

            print(f"‚úÖ Normal Sale {posicao.ticker}: PM_compra={posicao.preco_medio:.2f}, PM_venda={preco_venda_efetivo:.2f}, Qtd={qtd_a_vender}, Resultado={resultado:.2f}")
            return op_fechada
        
        # ‚úÖ CASO 4: Venda a descoberto (short selling)
        else:
            preco_venda_efetivo = operacao.price - (operacao.fees / operacao.quantity if operacao.quantity > 0 else 0)
            valor_venda = operacao.quantity * preco_venda_efetivo
            
            # Adicionar √† posi√ß√£o vendida
            posicao.quantidade_vendida += operacao.quantity
            posicao.valor_venda_total += valor_venda
            posicao.preco_medio_venda = posicao.valor_venda_total / posicao.quantidade_vendida
            
            print(f"‚úÖ Short Sale {posicao.ticker}: PM_venda={preco_venda_efetivo:.2f}, Qtd={operacao.quantity} (aguardando cobertura)")
            return None  # N√£o gera opera√ß√£o fechada ainda

    return None

# ‚úÖ FUN√á√ÉO AUXILIAR PARA DEBUG DE POSI√á√ïES
def debug_posicao(posicao: PosicaoAcao, operacao_atual: Operacao):
    """Debug das posi√ß√µes antes e depois das opera√ß√µes"""
    print(f"üìä [POSI√á√ÉO DEBUG] {posicao.ticker} - {operacao_atual.operation} {operacao_atual.quantity}@{operacao_atual.price}")
    print(f"   Posi√ß√£o Longa: {posicao.quantidade} a√ß√µes @ PM {posicao.preco_medio:.2f} (custo: {posicao.custo_total:.2f})")
    print(f"   Posi√ß√£o Vendida: {posicao.quantidade_vendida} a√ß√µes @ PM {posicao.preco_medio_venda:.2f} (valor: {posicao.valor_venda_total:.2f})")
    print("=" * 50)


# ‚úÖ VALIDA√á√ÉO APRIMORADA
def validar_operacao_fechada(op_fechada: OperacaoFechada) -> bool:
    """
    Valida se uma opera√ß√£o fechada tem todos os campos corretos.
    CORRE√á√ÉO: Adiciona debug detalhado para identificar problemas.
    """
    import logging
    
    if not op_fechada:
        logging.warning(f"‚ùå [VALIDA√á√ÉO] Opera√ß√£o fechada √© None")
        return False
    
    ticker = op_fechada.ticker
    
    # ‚úÖ Validar pre√ßos m√©dios
    if op_fechada.preco_medio_compra <= 0:
        logging.warning(f"‚ùå [VALIDA√á√ÉO] {ticker}: Pre√ßo m√©dio de compra inv√°lido: {op_fechada.preco_medio_compra}")
        return False
        
    if op_fechada.preco_medio_venda <= 0:
        logging.warning(f"‚ùå [VALIDA√á√ÉO] {ticker}: Pre√ßo m√©dio de venda inv√°lido: {op_fechada.preco_medio_venda}")
        return False
        
    # ‚úÖ Validar quantidade
    if op_fechada.quantidade <= 0:
        logging.warning(f"‚ùå [VALIDA√á√ÉO] {ticker}: Quantidade inv√°lida: {op_fechada.quantidade}")
        return False
    
    # ‚úÖ Validar resultado
    resultado_calculado = (op_fechada.preco_medio_venda - op_fechada.preco_medio_compra) * op_fechada.quantidade
    if abs(resultado_calculado - op_fechada.resultado) > 0.01:
        logging.warning(f"‚ùå [VALIDA√á√ÉO] {ticker}: Resultado inconsistente: "
                       f"calculado={resultado_calculado:.2f}, salvo={op_fechada.resultado:.2f}")
        return False
    
    # ‚úÖ Se chegou at√© aqui, a opera√ß√£o √© v√°lida
    logging.debug(f"‚úÖ [VALIDA√á√ÉO] {ticker}: Opera√ß√£o fechada v√°lida - {op_fechada.resultado:.2f}")
    return True



# ‚úÖ MODIFICA√á√ÉO na fun√ß√£o calcular_resultados_operacoes
def calcular_resultados_operacoes(operacoes: List[Operacao]) -> Dict[str, Any]:
    """
    CORRE√á√ÉO: Melhora debug e valida√ß√µes para identificar problemas.
    """
    import logging
    logging.info(f"üîÑ [CALCULOS.PY] Iniciando c√°lculo com {len(operacoes)} opera√ß√µes")
    
    operacoes_fechadas = []
    posicoes = defaultdict(lambda: PosicaoAcao(ticker=""))

    # Agrupar opera√ß√µes por dia
    operacoes_por_dia = defaultdict(list)
    for op in operacoes:
        operacoes_por_dia[op.date].append(op)

    logging.info(f"üîÑ [CALCULOS.PY] Opera√ß√µes agrupadas em {len(operacoes_por_dia)} dias")

    for data, ops_dia in sorted(operacoes_por_dia.items()):
        logging.info(f"\nüìÖ [CALCULOS.PY] Processando {data} com {len(ops_dia)} opera√ß√µes")
        
        # Verificar se h√° day trade neste dia
        ops_por_ticker = defaultdict(lambda: {'compras': [], 'vendas': []})
        for op in ops_dia:
            if op.operation == 'buy':
                ops_por_ticker[op.ticker]['compras'].append(op)
            else:
                ops_por_ticker[op.ticker]['vendas'].append(op)

        for ticker, trades in ops_por_ticker.items():
            compras = trades['compras']
            vendas = trades['vendas']
            
            if ticker not in posicoes:
                posicoes[ticker] = PosicaoAcao(ticker=ticker)
            
            # ‚úÖ DEBUG da posi√ß√£o antes do processamento
            pos_antes = posicoes[ticker]
            logging.info(f"üéØ [ANTES] {ticker}: Long={pos_antes.quantidade}@{pos_antes.preco_medio:.2f}, "
                        f"Short={pos_antes.quantidade_vendida}@{pos_antes.preco_medio_venda:.2f}")
            
            if compras and vendas:
                # ‚úÖ DIA DE DAY TRADE - usar PM global
                ops_do_ticker = compras + vendas
                logging.info(f"üîÑ [DAY TRADE] {ticker}: {len(compras)} compras + {len(vendas)} vendas")
                
                resultado_dt = calcular_resultado_day_trade(ops_do_ticker)
                
                if resultado_dt and validar_operacao_fechada(resultado_dt):
                    operacoes_fechadas.append(resultado_dt)
                    logging.info(f"‚úÖ Day Trade adicionado: {ticker} - Resultado: {resultado_dt.resultado:.2f}")
                elif resultado_dt:
                    logging.warning(f"‚ùå Day trade inv√°lido descartado: {ticker} em {data}")
                    # Debug detalhado do por que foi descartado
                    logging.info(f"   Debug: PM_compra={resultado_dt.preco_medio_compra:.2f}, "
                               f"PM_venda={resultado_dt.preco_medio_venda:.2f}, "
                               f"Quantidade={resultado_dt.quantidade}, "
                               f"Resultado={resultado_dt.resultado:.2f}")
                
                # ‚úÖ PROCESSAR SOBRAS COMO SWING TRADE
                total_comprado = sum(op.quantity for op in compras)
                total_vendido = sum(op.quantity for op in vendas)
                qtd_day_trade = min(total_comprado, total_vendido)
                
                logging.info(f"üìä [SOBRAS] {ticker}: Comprado={total_comprado}, Vendido={total_vendido}, DT={qtd_day_trade}")
                
                sobra_venda = total_vendido - qtd_day_trade
                if sobra_venda > 0 and posicoes[ticker].tem_posicao_comprada():
                    qtd_swing = min(sobra_venda, posicoes[ticker].quantidade)
                    if qtd_swing > 0 and posicoes[ticker].preco_medio > 0:
                        
                        # ‚úÖ PM vendas (usar m√©dia ponderada do dia)
                        valor_bruto_vendas = sum(op.quantity * op.price for op in vendas)
                        fees_vendas = sum(op.fees for op in vendas)
                        valor_liquido_vendas = valor_bruto_vendas - fees_vendas
                        pm_vendas_swing = valor_liquido_vendas / total_vendido
                        
                        resultado_swing = (pm_vendas_swing - posicoes[ticker].preco_medio) * qtd_swing
                        
                        op_swing = OperacaoFechada(
                            ticker=ticker,
                            quantidade=qtd_swing,
                            preco_medio_compra=posicoes[ticker].preco_medio,  # ‚úÖ PM da posi√ß√£o
                            preco_medio_venda=pm_vendas_swing,
                            resultado=resultado_swing,
                            day_trade=False,
                            data_fechamento=data
                        )
                        
                        if validar_operacao_fechada(op_swing):
                            operacoes_fechadas.append(op_swing)
                            logging.info(f"‚úÖ Swing Trade sobra adicionado: {ticker} - Resultado: {resultado_swing:.2f}")
                        else:
                            logging.warning(f"‚ùå Swing trade sobra inv√°lido: {ticker}")
                
                # ‚úÖ ATUALIZAR POSI√á√ïES ap√≥s day trade
                for op in compras:
                    resultado_st = processar_operacao_swing_trade(posicoes[ticker], op)
                    if resultado_st and validar_operacao_fechada(resultado_st):
                        # Esta seria uma opera√ß√£o adicional (cobertura de short, etc.)
                        operacoes_fechadas.append(resultado_st)
                        logging.info(f"‚úÖ Opera√ß√£o adicional (compra): {ticker}")
                
                # Processar vendas restantes (vendas a descoberto)
                for op in vendas:
                    # S√≥ processar se sobrou algo ap√≥s day trade e swing trade
                    sobra_desta_venda = op.quantity - (op.quantity * qtd_day_trade / total_vendido if total_vendido > 0 else 0)
                    if sobra_desta_venda > qtd_swing:
                        resultado_st = processar_operacao_swing_trade(posicoes[ticker], op)
                        if resultado_st and validar_operacao_fechada(resultado_st):
                            operacoes_fechadas.append(resultado_st)
                            logging.info(f"‚úÖ Opera√ß√£o adicional (venda): {ticker}")
            
            else:
                # ‚úÖ DIA DE SWING TRADE APENAS
                logging.info(f"üîÑ [SWING ONLY] {ticker}: {len(compras)} compras + {len(vendas)} vendas")
                
                for op in compras + vendas:
                    resultado_st = processar_operacao_swing_trade(posicoes[ticker], op)
                    
                    if resultado_st and validar_operacao_fechada(resultado_st):
                        operacoes_fechadas.append(resultado_st)
                        tipo_op = "Cobertura" if op.operation == 'buy' and posicoes[ticker].tem_posicao_vendida() else "Venda Normal"
                        logging.info(f"‚úÖ {tipo_op} adicionado: {ticker} - Resultado: {resultado_st.resultado:.2f}")
                    elif resultado_st:
                        logging.warning(f"‚ùå Swing trade inv√°lido descartado: {ticker} em {data}")
                        # Debug detalhado
                        logging.info(f"   Debug: PM_compra={resultado_st.preco_medio_compra:.2f}, "
                                   f"PM_venda={resultado_st.preco_medio_venda:.2f}, "
                                   f"Quantidade={resultado_st.quantidade}, "
                                   f"Resultado={resultado_st.resultado:.2f}")
            
            # ‚úÖ DEBUG da posi√ß√£o depois do processamento
            pos_depois = posicoes[ticker]
            logging.info(f"üéØ [DEPOIS] {ticker}: Long={pos_depois.quantidade}@{pos_depois.preco_medio:.2f}, "
                        f"Short={pos_depois.quantidade_vendida}@{pos_depois.preco_medio_venda:.2f}")

    logging.info(f"‚úÖ [CALCULOS.PY] Total de opera√ß√µes fechadas v√°lidas: {len(operacoes_fechadas)}")
    
    # ‚úÖ DEBUG ESPEC√çFICO PARA BBAS3
    bbas3_ops = [op for op in operacoes_fechadas if op.ticker == 'BBAS3']
    if bbas3_ops:
        logging.info(f"üéØ [BBAS3 RESULTADO] {len(bbas3_ops)} opera√ß√µes fechadas:")
        for i, op in enumerate(bbas3_ops, 1):
            logging.info(f"   {i}. {op.data_fechamento}: {op.quantidade} a√ß√µes, "
                        f"PM_compra={op.preco_medio_compra:.2f}, "
                        f"PM_venda={op.preco_medio_venda:.2f}, "
                        f"Resultado={op.resultado:.2f}")
    else:
        logging.warning(f"‚ö†Ô∏è [BBAS3] Nenhuma opera√ß√£o fechada gerada!")
        
        # Verificar se h√° opera√ß√µes BBAS3
        bbas3_operacoes = [op for op in operacoes if op.ticker == 'BBAS3']
        if bbas3_operacoes:
            logging.info(f"üîç [BBAS3 DEBUG] {len(bbas3_operacoes)} opera√ß√µes BBAS3 processadas:")
            for op in bbas3_operacoes:
                logging.info(f"   {op.date}: {op.operation} {op.quantity} @ {op.price:.2f}")
    
    return {
        "operacoes_fechadas": operacoes_fechadas,
        "carteira_final": posicoes
    }


    """
    CORRE√á√ÉO: Trata adequadamente vendas a descoberto em todas as situa√ß√µes.
    """
    operacoes_fechadas = []
    posicoes = defaultdict(lambda: PosicaoAcao(ticker=""))

    # Agrupar opera√ß√µes por dia
    operacoes_por_dia = defaultdict(list)
    for op in operacoes:
        operacoes_por_dia[op.date].append(op)

    for data, ops_dia in sorted(operacoes_por_dia.items()):
        print(f"\nüìÖ [PROCESSANDO] {data}")
        
        # Verificar se h√° day trade neste dia
        ops_por_ticker = defaultdict(lambda: {'compras': [], 'vendas': []})
        for op in ops_dia:
            if op.operation == 'buy':
                ops_por_ticker[op.ticker]['compras'].append(op)
            else:
                ops_por_ticker[op.ticker]['vendas'].append(op)

        for ticker, trades in ops_por_ticker.items():
            compras = trades['compras']
            vendas = trades['vendas']
            
            if ticker not in posicoes:
                posicoes[ticker] = PosicaoAcao(ticker=ticker)
            
            # Debug da posi√ß√£o antes do processamento
            if compras or vendas:
                print(f"üéØ [ANTES] {ticker}: Long={posicoes[ticker].quantidade}@{posicoes[ticker].preco_medio:.2f}, Short={posicoes[ticker].quantidade_vendida}@{posicoes[ticker].preco_medio_venda:.2f}")
            
            if compras and vendas:
                # DIA DE DAY TRADE - usar PM global
                ops_do_ticker = compras + vendas
                resultado_dt = calcular_resultado_day_trade(ops_do_ticker)
                
                if resultado_dt and validar_operacao_fechada(resultado_dt):
                    operacoes_fechadas.append(resultado_dt)
                    print(f"‚úÖ Day Trade adicionado: {ticker}")
                elif resultado_dt:
                    print(f"‚ùå Day trade inv√°lido descartado: {ticker} em {data}")
                
                # ‚úÖ CORRE√á√ÉO: Processar sobras considerando vendas a descoberto
                total_comprado = sum(op.quantity for op in compras)
                total_vendido = sum(op.quantity for op in vendas)
                
                # Simular o que sobrou ap√≥s day trade
                qtd_day_trade = min(total_comprado, total_vendido)
                sobra_compra = total_comprado - qtd_day_trade
                sobra_venda = total_vendido - qtd_day_trade
                
                if sobra_compra > 0:
                    # Processar compras restantes
                    pm_compra_global = sum(op.quantity * op.price + op.fees for op in compras) / total_comprado
                    
                    # Se h√° posi√ß√£o vendida, pode ser cobertura
                    if posicoes[ticker].tem_posicao_vendida():
                        qtd_cobertura = min(sobra_compra, posicoes[ticker].quantidade_vendida)
                        if qtd_cobertura > 0:
                            # Simular cobertura
                            preco_venda_original = posicoes[ticker].preco_medio_venda
                            resultado_cobertura = (preco_venda_original - pm_compra_global) * qtd_cobertura
                            
                            op_cobertura = OperacaoFechada(
                                ticker=ticker,
                                quantidade=qtd_cobertura,
                                preco_medio_compra=pm_compra_global,
                                preco_medio_venda=preco_venda_original,
                                resultado=resultado_cobertura,
                                day_trade=False,
                                data_fechamento=data
                            )
                            
                            if validar_operacao_fechada(op_cobertura):
                                operacoes_fechadas.append(op_cobertura)
                                print(f"‚úÖ Cobertura adicionada: {ticker}")
                    
                    # Adicionar sobra √† posi√ß√£o longa
                    sobra_final_compra = sobra_compra - (qtd_cobertura if 'qtd_cobertura' in locals() else 0)
                    if sobra_final_compra > 0:
                        posicoes[ticker].quantidade += sobra_final_compra
                        posicoes[ticker].custo_total += sobra_final_compra * pm_compra_global
                        if posicoes[ticker].quantidade > 0:
                            posicoes[ticker].preco_medio = posicoes[ticker].custo_total / posicoes[ticker].quantidade
                
                elif sobra_venda > 0:
                    # Processar vendas restantes
                    pm_venda_global = (sum(op.quantity * op.price for op in vendas) - sum(op.fees for op in vendas)) / total_vendido
                    
                    # Se h√° posi√ß√£o longa, pode ser venda normal
                    if posicoes[ticker].tem_posicao_comprada():
                        qtd_venda_normal = min(sobra_venda, posicoes[ticker].quantidade)
                        if qtd_venda_normal > 0 and posicoes[ticker].preco_medio > 0:
                            custo_venda = qtd_venda_normal * posicoes[ticker].preco_medio
                            valor_venda = qtd_venda_normal * pm_venda_global
                            resultado_venda = valor_venda - custo_venda
                            
                            op_venda = OperacaoFechada(
                                ticker=ticker,
                                quantidade=qtd_venda_normal,
                                preco_medio_compra=posicoes[ticker].preco_medio,
                                preco_medio_venda=pm_venda_global,
                                resultado=resultado_venda,
                                day_trade=False,
                                data_fechamento=data
                            )
                            
                            if validar_operacao_fechada(op_venda):
                                operacoes_fechadas.append(op_venda)
                                print(f"‚úÖ Venda normal adicionada: {ticker}")
                            
                            # Atualizar posi√ß√£o longa
                            posicoes[ticker].quantidade -= qtd_venda_normal
                            posicoes[ticker].custo_total -= custo_venda
                            if posicoes[ticker].quantidade == 0:
                                posicoes[ticker].preco_medio = 0.0
                                posicoes[ticker].custo_total = 0.0
                    
                    # Adicionar sobra √† posi√ß√£o vendida
                    sobra_final_venda = sobra_venda - (qtd_venda_normal if 'qtd_venda_normal' in locals() else 0)
                    if sobra_final_venda > 0:
                        posicoes[ticker].quantidade_vendida += sobra_final_venda
                        posicoes[ticker].valor_venda_total += sobra_final_venda * pm_venda_global
                        posicoes[ticker].preco_medio_venda = posicoes[ticker].valor_venda_total / posicoes[ticker].quantidade_vendida
            else:
                # DIA DE SWING TRADE APENAS
                for op in compras + vendas:
                    resultado_st = processar_operacao_swing_trade(posicoes[ticker], op)
                    
                    if resultado_st and validar_operacao_fechada(resultado_st):
                        operacoes_fechadas.append(resultado_st)
                        print(f"‚úÖ Swing trade adicionado: {ticker}")
                    elif resultado_st:
                        print(f"‚ùå Swing trade inv√°lido descartado: {ticker} em {data}")

    print(f"\n‚úÖ Total de opera√ß√µes fechadas v√°lidas: {len(operacoes_fechadas)}")
    return {
        "operacoes_fechadas": operacoes_fechadas,
        "carteira_final": posicoes
    }
    
    """
    CORRE√á√ÉO: Nova l√≥gica que calcula pre√ßo m√©dio ponderado corretamente.
    Adiciona valida√ß√µes em cada opera√ß√£o fechada criada.
    """
    operacoes_fechadas = []
    posicoes = defaultdict(PosicaoAcao)

    # Agrupar opera√ß√µes por dia
    operacoes_por_dia = defaultdict(list)
    for op in operacoes:
        operacoes_por_dia[op.date].append(op)

    for data, ops_dia in sorted(operacoes_por_dia.items()):
        # Verificar se h√° day trade neste dia
        ops_por_ticker = defaultdict(lambda: {'compras': [], 'vendas': []})
        for op in ops_dia:
            if op.operation == 'buy':
                ops_por_ticker[op.ticker]['compras'].append(op)
            else:
                ops_por_ticker[op.ticker]['vendas'].append(op)

        for ticker, trades in ops_por_ticker.items():
            compras = trades['compras']
            vendas = trades['vendas']
            
            if compras and vendas:
                # DIA DE DAY TRADE - usar PM global
                ops_do_ticker = compras + vendas
                resultado_dt = calcular_resultado_day_trade(ops_do_ticker)
                
                # ‚úÖ VALIDA√á√ÉO: S√≥ adiciona se a opera√ß√£o for v√°lida
                if resultado_dt and validar_operacao_fechada(resultado_dt):
                    operacoes_fechadas.append(resultado_dt)
                elif resultado_dt:
                    print(f"‚ùå Day trade inv√°lido descartado: {ticker} em {data}")
                
                # Processar o que sobrou como swing trade
                total_comprado = sum(op.quantity for op in compras)
                total_vendido = sum(op.quantity for op in vendas)
                
                if total_comprado > total_vendido:
                    # Sobrou compra - adicionar √† posi√ß√£o
                    qtd_restante = total_comprado - total_vendido
                    # Criar opera√ß√£o virtual de compra com PM global
                    pm_compra_global = sum(op.quantity * op.price + op.fees for op in compras) / total_comprado
                    
                    if ticker not in posicoes:
                        posicoes[ticker] = PosicaoAcao(ticker=ticker)
                    
                    posicoes[ticker].quantidade += qtd_restante
                    posicoes[ticker].custo_total += qtd_restante * pm_compra_global
                    if posicoes[ticker].quantidade > 0:
                        posicoes[ticker].preco_medio = posicoes[ticker].custo_total / posicoes[ticker].quantidade
                
                elif total_vendido > total_comprado:
                    # Sobrou venda - processar como swing trade
                    qtd_venda_st = total_vendido - total_comprado
                    pm_venda_global = (sum(op.quantity * op.price for op in vendas) - sum(op.fees for op in vendas)) / total_vendido
                    
                    if ticker not in posicoes:
                        posicoes[ticker] = PosicaoAcao(ticker=ticker)
                    
                    if posicoes[ticker].quantidade > 0:
                        qtd_a_vender = min(qtd_venda_st, posicoes[ticker].quantidade)
                        
                        # ‚úÖ VALIDA√á√ÉO: Verificar se PM da posi√ß√£o √© v√°lido
                        if posicoes[ticker].preco_medio <= 0:
                            print(f"‚ùå ERRO: Pre√ßo m√©dio da posi√ß√£o inv√°lido para {ticker}: {posicoes[ticker].preco_medio}")
                            continue
                            
                        custo_da_venda = qtd_a_vender * posicoes[ticker].preco_medio
                        valor_da_venda = qtd_a_vender * pm_venda_global
                        resultado = valor_da_venda - custo_da_venda
                        
                        # Criar opera√ß√£o fechada de swing trade
                        op_fechada_st = OperacaoFechada(
                            ticker=ticker,
                            quantidade=qtd_a_vender,
                            preco_medio_compra=posicoes[ticker].preco_medio,
                            preco_medio_venda=pm_venda_global,
                            resultado=resultado,
                            day_trade=False,
                            data_fechamento=data
                        )
                        
                        # ‚úÖ VALIDA√á√ÉO: S√≥ adiciona se v√°lido
                        if validar_operacao_fechada(op_fechada_st):
                            operacoes_fechadas.append(op_fechada_st)
                        else:
                            print(f"‚ùå Swing trade inv√°lido descartado: {ticker} em {data}")
                        
                        # Atualizar posi√ß√£o
                        posicoes[ticker].quantidade -= qtd_a_vender
                        posicoes[ticker].custo_total -= custo_da_venda
                        if posicoes[ticker].quantidade == 0:
                            posicoes[ticker].preco_medio = 0.0
                            posicoes[ticker].custo_total = 0.0
                        elif posicoes[ticker].quantidade > 0:
                            posicoes[ticker].preco_medio = posicoes[ticker].custo_total / posicoes[ticker].quantidade
            else:
                # DIA DE SWING TRADE APENAS
                for op in compras + vendas:
                    if op.ticker not in posicoes:
                        posicoes[op.ticker] = PosicaoAcao(ticker=op.ticker)
                    
                    resultado_st = processar_operacao_swing_trade(posicoes[op.ticker], op)
                    
                    # ‚úÖ VALIDA√á√ÉO: S√≥ adiciona se v√°lido
                    if resultado_st and validar_operacao_fechada(resultado_st):
                        operacoes_fechadas.append(resultado_st)
                    elif resultado_st:
                        print(f"‚ùå Swing trade inv√°lido descartado: {op.ticker} em {data}")

    print(f"‚úÖ Total de opera√ß√µes fechadas v√°lidas: {len(operacoes_fechadas)}")
    return {
        "operacoes_fechadas": operacoes_fechadas,
        "carteira_final": posicoes
    }        